!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALL_SEC_FROM_FST_TO_FAT2	boot/boot.asm	/^ALL_SEC_FROM_FST_TO_FAT2	equ	19 - 2$/;"	d
ALL_SEC_FROM_FST_TO_FAT2	boot/loader.asm	/^ALL_SEC_FROM_FST_TO_FAT2	equ	19 - 2$/;"	d
ASM	Makefile	/^ASM		= nasm$/;"	m
ASMBFLAG	Makefile	/^ASMBFLAG	= -I boot\/include\/$/;"	m
ASMKFLAG	Makefile	/^ASMKFLAG	= -I include\/ -f elf$/;"	m
BASE_KERNEL	boot/loader.asm	/^BASE_KERNEL	equ	08000h$/;"	d
BASE_LOADER	boot/boot.asm	/^BASE_LOADER			equ	09000h$/;"	d
BASE_PAGEDIR	boot/loader.asm	/^BASE_PAGEDIR			equ	100000h$/;"	d
BASE_PAGETBL	boot/loader.asm	/^BASE_PAGETBL			equ	101000h$/;"	d
BASE_STACK	boot/boot.asm	/^BASE_STACK	equ		0x7c00$/;"	d
BASE_STACK	boot/loader.asm	/^BASE_STACK	equ	0100h	;原理跟boot.asm里面的一样$/;"	d
CC	Makefile	/^CC		= gcc$/;"	m
CFLAG	Makefile	/^CFLAG		=  -c -fno-builtin -m32 -I include\/ -fno-stack-protector$/;"	m
DA_32	include/protect.h	40;"	d
DA_386CGate	include/protect.h	58;"	d
DA_386IGate	include/protect.h	59;"	d
DA_386TGate	include/protect.h	60;"	d
DA_386TSS	include/protect.h	57;"	d
DA_C	include/protect.h	50;"	d
DA_CCO	include/protect.h	52;"	d
DA_CCOR	include/protect.h	53;"	d
DA_CR	include/protect.h	51;"	d
DA_DPL0	include/protect.h	42;"	d
DA_DPL1	include/protect.h	43;"	d
DA_DPL2	include/protect.h	44;"	d
DA_DPL3	include/protect.h	45;"	d
DA_DR	include/protect.h	47;"	d
DA_DRW	include/protect.h	48;"	d
DA_DRWA	include/protect.h	49;"	d
DA_LDT	include/protect.h	55;"	d
DA_LIMIT_4K	include/protect.h	41;"	d
DA_TaskGate	include/protect.h	56;"	d
DESCRIPTOR	include/protect.h	/^}DESCRIPTOR;$/;"	t	typeref:struct:s_descriptor
ENTRYPOINT	Makefile	/^ENTRYPOINT	= 0x30400$/;"	m
EXTERN	include/const.h	4;"	d
EXTERN	include/global.h	2;"	d
EXTERN	include/global.h	3;"	d
FST_SEC_IN_ROOT_DIR	boot/boot.asm	/^FST_SEC_IN_ROOT_DIR		equ	19$/;"	d
FST_SEC_IN_ROOT_DIR	boot/loader.asm	/^FST_SEC_IN_ROOT_DIR		equ	19$/;"	d
GATE	include/protect.h	/^}GATE;$/;"	t	typeref:struct:s_gate
GDT_SIZE	include/const.h	9;"	d
GLOBAL_VARIABLES_HERE	kernel/global.c	1;"	d	file:
IDT_SIZE	include/const.h	10;"	d
INDEX_DUMMY	include/protect.h	25;"	d
INDEX_FLAT_C	include/protect.h	26;"	d
INDEX_FLAT_RW	include/protect.h	27;"	d
INDEX_VIDEO	include/protect.h	28;"	d
INT_M_CTL	include/const.h	12;"	d
INT_M_CTLMASK	include/const.h	13;"	d
INT_S_CTL	include/const.h	14;"	d
INT_S_CTLMASK	include/const.h	15;"	d
INT_VECTOR_BOUNDS	include/protect.h	68;"	d
INT_VECTOR_BREAKPOINT	include/protect.h	66;"	d
INT_VECTOR_COPROC_ERR	include/protect.h	78;"	d
INT_VECTOR_COPROC_NOT	include/protect.h	70;"	d
INT_VECTOR_COPROC_SEG	include/protect.h	72;"	d
INT_VECTOR_DEBUG	include/protect.h	64;"	d
INT_VECTOR_DIVIDE	include/protect.h	63;"	d
INT_VECTOR_DOUBLE_FAULT	include/protect.h	71;"	d
INT_VECTOR_INVAL_OP	include/protect.h	69;"	d
INT_VECTOR_INVAL_TSS	include/protect.h	73;"	d
INT_VECTOR_IRQ0	include/protect.h	80;"	d
INT_VECTOR_IRQ8	include/protect.h	81;"	d
INT_VECTOR_NMI	include/protect.h	65;"	d
INT_VECTOR_OVERFLOW	include/protect.h	67;"	d
INT_VECTOR_PAGE_FAULT	include/protect.h	77;"	d
INT_VECTOR_PROTECTION	include/protect.h	76;"	d
INT_VECTOR_SEG_NOT	include/protect.h	74;"	d
INT_VECTOR_STACK_FAULT	include/protect.h	75;"	d
KERNEL	Makefile	/^KERNEL		= kernel.bin$/;"	m
KERNELBOOT	Makefile	/^KERNELBOOT	= boot\/boot.bin boot\/loader.bin$/;"	m
KERNEL_SIZE	boot/loader.asm	/^KERNEL_SIZE	dd	0$/;"	d
LABEL_CMP_FILENAME	boot/boot.asm	/^LABEL_CMP_FILENAME:$/;"	l
LABEL_CMP_FILENAME	boot/loader.asm	/^LABEL_CMP_FILENAME:$/;"	l
LABEL_DATA	boot/loader.asm	/^LABEL_DATA:$/;"	l
LABEL_DESC_FLAT_C	boot/loader.asm	/^LABEL_DESC_FLAT_C:	Descriptor 0,		0fffffh, DA_CR | DA_32 | DA_LIMIT_4K$/;"	l
LABEL_DESC_FLAT_RW	boot/loader.asm	/^LABEL_DESC_FLAT_RW:	Descriptor 0,		0fffffh, DA_DRW | DA_32 | DA_LIMIT_4K$/;"	l
LABEL_DESC_VIDEO	boot/loader.asm	/^LABEL_DESC_VIDEO:	Descriptor 0B8000h,	 0ffffh, DA_DRW | DA_32 | DA_DPL3$/;"	l
LABEL_DIFFERENT	boot/boot.asm	/^LABEL_DIFFERENT:$/;"	l
LABEL_DIFFERENT	boot/loader.asm	/^LABEL_DIFFERENT:$/;"	l
LABEL_EVEN	boot/boot.asm	/^LABEL_EVEN:$/;"	l
LABEL_EVEN	boot/loader.asm	/^LABEL_EVEN:$/;"	l
LABEL_EVEN_2	boot/boot.asm	/^LABEL_EVEN_2:$/;"	l
LABEL_EVEN_2	boot/loader.asm	/^LABEL_EVEN_2:$/;"	l
LABEL_FILENAME_FOUND	boot/boot.asm	/^LABEL_FILENAME_FOUND:$/;"	l
LABEL_FILENAME_FOUND	boot/loader.asm	/^LABEL_FILENAME_FOUND:$/;"	l
LABEL_FILE_END	boot/boot.asm	/^LABEL_FILE_END:$/;"	l
LABEL_FILE_LOAD_SUCCESSFULLY	boot/loader.asm	/^LABEL_FILE_LOAD_SUCCESSFULLY:$/;"	l
LABEL_GDT	boot/loader.asm	/^LABEL_GDT:		Descriptor 0,	              0, 0$/;"	l
LABEL_GOON	boot/loader.asm	/^LABEL_GOON:$/;"	l
LABEL_GOON_LOADING_FILE	boot/boot.asm	/^LABEL_GOON_LOADING_FILE:$/;"	l
LABEL_GOON_LOADING_KERNEL	boot/loader.asm	/^LABEL_GOON_LOADING_KERNEL:$/;"	l
LABEL_GOTO_NEXT_SECTOR	boot/boot.asm	/^LABEL_GOTO_NEXT_SECTOR:$/;"	l
LABEL_GOTO_NEXT_SEC_IN_ROOT_DIR	boot/loader.asm	/^LABEL_GOTO_NEXT_SEC_IN_ROOT_DIR:$/;"	l
LABEL_GO_ON	boot/boot.asm	/^LABEL_GO_ON:$/;"	l
LABEL_NOKERNEL	boot/loader.asm	/^LABEL_NOKERNEL:$/;"	l
LABEL_NO_LOADERBIN	boot/boot.asm	/^LABEL_NO_LOADERBIN:$/;"	l
LABEL_PM_START	boot/loader.asm	/^LABEL_PM_START:$/;"	l
LABEL_SEARCH_FOR_KERNELBIN	boot/loader.asm	/^LABEL_SEARCH_FOR_KERNELBIN:$/;"	l
LABEL_SEARCH_FOR_LOADER	boot/boot.asm	/^LABEL_SEARCH_FOR_LOADER:$/;"	l
LABEL_SEARCH_IN_ROOT_DIR_BEGIN	boot/boot.asm	/^LABEL_SEARCH_IN_ROOT_DIR_BEGIN:$/;"	l
LABEL_SEARCH_IN_ROOT_DIR_BEGIN	boot/loader.asm	/^LABEL_SEARCH_IN_ROOT_DIR_BEGIN:$/;"	l
LABEL_START	boot/boot.asm	/^LABEL_START:$/;"	l
LABEL_START	boot/loader.asm	/^LABEL_START:$/;"	l
LD	Makefile	/^LD		= ld$/;"	m
LDFLAG	Makefile	/^LDFLAG		= -s -Ttext $(ENTRYPOINT) -m elf_i386 $/;"	m
NAME_KERNEL	boot/loader.asm	/^NAME_KERNEL	db	"KERNEL  BIN"$/;"	d
NAME_LOADER	boot/boot.asm	/^NAME_LOADER		db	"LOADER  BIN", 0$/;"	d
NR_SEC_IN_ROOTDIR	boot/boot.asm	/^NR_SEC_IN_ROOTDIR		equ	14$/;"	d
NR_SEC_IN_ROOT_DIR	boot/loader.asm	/^NR_SEC_IN_ROOT_DIR		equ	14$/;"	d
OBJS	Makefile	/^OBJS		= kernel\/kernel.o kernel\/start.o lib\/kliba.o lib\/string.o lib\/klib.o kernel\/global.o \\$/;"	m
OFFSET_KERNEL	boot/loader.asm	/^OFFSET_KERNEL	equ	0h$/;"	d
OFFSET_LOADER	boot/boot.asm	/^OFFSET_LOADER			equ	0100h$/;"	d
PRIVATE	include/const.h	7;"	d
PRIVILEGE_KRNL	include/const.h	17;"	d
PRIVILEGE_TASK	include/const.h	18;"	d
PRIVILEGE_USER	include/const.h	19;"	d
PUBLIC	include/const.h	6;"	d
SEC_NO_OF_FAT1	boot/boot.asm	/^SEC_NO_OF_FAT1			equ	1$/;"	d
SEC_NO_OF_FAT1	boot/loader.asm	/^SEC_NO_OF_FAT1			equ	1$/;"	d
SELECTOR_DUMMY	include/protect.h	30;"	d
SELECTOR_FLAT_C	include/protect.h	31;"	d
SELECTOR_FLAT_RW	include/protect.h	32;"	d
SELECTOR_KERNEL_CS	include/protect.h	35;"	d
SELECTOR_KERNEL_CS	kernel/kernel.asm	/^SELECTOR_KERNEL_CS	equ	8$/;"	d
SELECTOR_KERNEL_DS	include/protect.h	36;"	d
SELECTOR_VIDEO	include/protect.h	33;"	d
STACK_SPACE	boot/loader.asm	/^STACK_SPACE:		times	1024	db	0$/;"	l
TARGIT	Makefile	/^TARGIT	= $(KERNELBOOT) $(OBJS) $(KERNEL)$/;"	m
_ORANGES_CONST_H_	include/const.h	2;"	d
_ORANGES_PROTECT_H_	include/protect.h	2;"	d
_ORANGES_TYPE_H_	include/type.h	2;"	d
_baseaddr_hign	boot/loader.asm	/^		_baseaddr_hign:	dd	0$/;"	d
_baseaddr_low	boot/loader.asm	/^		_baseaddr_low:	dd	0$/;"	d
_disp_pos	boot/loader.asm	/^	_disp_pos:		dd	(80 * 6 + 0) * 2$/;"	d
_len_high	boot/loader.asm	/^		_len_high:	dd	0$/;"	d
_len_low	boot/loader.asm	/^		_len_low:	dd	0$/;"	d
_memchk_buf	boot/loader.asm	/^	_memchk_buf:		times	256	db	0$/;"	l
_memsize	boot/loader.asm	/^	_memsize:		dd	0$/;"	d
_nr_mcr	boot/loader.asm	/^	_nr_mcr:			dd	0$/;"	d
_start	kernel/kernel.asm	/^_start:$/;"	l
_str_memtitle	boot/loader.asm	/^	_str_memtitle:		db	"BASEADDRL BASEADDRH LENGTHLOW LENGTHH TYPE", 0Ah, 0$/;"	d
_str_ramsize	boot/loader.asm	/^	_str_ramsize:		db	"RAM SIZE : ", 0$/;"	d
_str_return	boot/loader.asm	/^	_str_return:		db	0Ah, 0$/;"	d
_struct_ard	boot/loader.asm	/^	_struct_ard:$/;"	l
_type	boot/loader.asm	/^		_type		dd	0$/;"	d
attr	include/protect.h	/^	u8 attr;$/;"	m	struct:s_gate	access:public
attr1	include/protect.h	/^	u8 attr1;$/;"	m	struct:s_descriptor	access:public
base_high	include/protect.h	/^	u8 base_high;$/;"	m	struct:s_descriptor	access:public
base_low	include/protect.h	/^	u16 base_low;$/;"	m	struct:s_descriptor	access:public
base_mid	include/protect.h	/^	u8 base_mid;$/;"	m	struct:s_descriptor	access:public
baseaddr_hign	boot/loader.asm	/^		baseaddr_hign	equ	BaseOfLoaderPhyAddr + _baseaddr_hign$/;"	d
baseaddr_low	boot/loader.asm	/^		baseaddr_low	equ	BaseOfLoaderPhyAddr + _baseaddr_low$/;"	d
bounds_check	kernel/kernel.asm	/^bounds_check:$/;"	l
bounds_check	kernel/protect.c	/^void bounds_check();$/;"	p	file:
breakpoint_exception	kernel/kernel.asm	/^breakpoint_exception:$/;"	l
breakpoint_exception	kernel/protect.c	/^void breakpoint_exception();$/;"	p	file:
copr_error	kernel/kernel.asm	/^copr_error:$/;"	l
copr_error	kernel/protect.c	/^void copr_error();$/;"	p	file:
copr_not_available	kernel/kernel.asm	/^copr_not_available:$/;"	l
copr_not_available	kernel/protect.c	/^void copr_not_available();$/;"	p	file:
copr_seg_overrun	kernel/kernel.asm	/^copr_seg_overrun:$/;"	l
copr_seg_overrun	kernel/protect.c	/^void copr_seg_overrun();$/;"	p	file:
csinit	kernel/kernel.asm	/^csinit:$/;"	l
cstart	kernel/start.c	/^PUBLIC void cstart()$/;"	f
cur_sec	boot/boot.asm	/^cur_sec			dw	0$/;"	d
cur_sec	boot/loader.asm	/^cur_sec		dw	0$/;"	d
dcount	include/protect.h	/^	u8 dcount;$/;"	m	struct:s_gate	access:public
dec	boot/boot.asm	/^		dec	dx$/;"	d
dec	boot/loader.asm	/^	dec	dx$/;"	d
disp_al	boot/loader.asm	/^disp_al:$/;"	l
disp_color_str	include/proto.h	/^PUBLIC void disp_color_str(char *str, int color);$/;"	p	signature:(char *str, int color)
disp_color_str	lib/kliba.asm	/^disp_color_str:$/;"	l
disp_int	boot/loader.asm	/^disp_int:$/;"	l
disp_int	lib/klib.c	/^PUBLIC void disp_int(int num)$/;"	f	signature:(int num)
disp_meninfo	boot/loader.asm	/^disp_meninfo:$/;"	l
disp_pos	boot/loader.asm	/^	disp_pos		equ	BaseOfLoaderPhyAddr + _disp_pos$/;"	d
disp_pos	include/global.h	/^EXTERN	int		disp_pos;$/;"	v
disp_return	boot/loader.asm	/^disp_return:$/;"	l
disp_str	boot/loader.asm	/^disp_str:$/;"	l
disp_str	include/proto.h	/^PUBLIC void disp_str(char *str);$/;"	p	signature:(char *str)
disp_str	lib/kliba.asm	/^disp_str:$/;"	l
divide_error	kernel/kernel.asm	/^divide_error:$/;"	l
divide_error	kernel/protect.c	/^void divide_error();$/;"	p	file:
double_fault	kernel/kernel.asm	/^double_fault:$/;"	l
double_fault	kernel/protect.c	/^void double_fault();$/;"	p	file:
dw	boot/boot.asm	/^dw	0xaa55$/;"	l
exception	kernel/kernel.asm	/^exception:$/;"	l
exception_handler	kernel/protect.c	/^PUBLIC void exception_handler(int vec_no, int err_code, int eip, int cs, int eflags)$/;"	f	signature:(int vec_no, int err_code, int eip, int cs, int eflags)
extern	kernel/kernel.asm	/^extern	cstart$/;"	l
extern	kernel/kernel.asm	/^extern	disp_pos$/;"	l
extern	kernel/kernel.asm	/^extern	gdt_ptr$/;"	l
extern	kernel/kernel.asm	/^extern	idt_ptr$/;"	l
extern	kernel/kernel.asm	/^extern  exception_handler$/;"	l
extern	lib/kliba.asm	/^extern	disp_pos$/;"	l
gdt	include/global.h	/^EXTERN	DESCRIPTOR	gdt[GDT_SIZE];$/;"	v
gdt_len	boot/loader.asm	/^gdt_len		equ	$ - LABEL_GDT$/;"	d
gdt_ptr	include/global.h	/^EXTERN	u8		gdt_ptr[6];$/;"	v
gdtr	boot/loader.asm	/^gdtr		dw	gdt_len$/;"	d
general_protection	kernel/kernel.asm	/^general_protection:$/;"	l
general_protection	kernel/protect.c	/^void general_protection();$/;"	p	file:
get_next_clu	boot/boot.asm	/^get_next_clu:$/;"	l
get_next_clu	boot/loader.asm	/^get_next_clu:$/;"	l
global	kernel/kernel.asm	/^global _start$/;"	l
global	kernel/kernel.asm	/^global bounds_check$/;"	l
global	kernel/kernel.asm	/^global breakpoint_exception$/;"	l
global	kernel/kernel.asm	/^global copr_error$/;"	l
global	kernel/kernel.asm	/^global copr_not_available$/;"	l
global	kernel/kernel.asm	/^global copr_seg_overrun$/;"	l
global	kernel/kernel.asm	/^global divide_error$/;"	l
global	kernel/kernel.asm	/^global double_fault$/;"	l
global	kernel/kernel.asm	/^global general_protection$/;"	l
global	kernel/kernel.asm	/^global inval_opcode$/;"	l
global	kernel/kernel.asm	/^global inval_tss$/;"	l
global	kernel/kernel.asm	/^global nmi$/;"	l
global	kernel/kernel.asm	/^global overflow$/;"	l
global	kernel/kernel.asm	/^global page_fault$/;"	l
global	kernel/kernel.asm	/^global segment_not_present$/;"	l
global	kernel/kernel.asm	/^global single_step_exception$/;"	l
global	kernel/kernel.asm	/^global stack_exception$/;"	l
global	lib/kliba.asm	/^global disp_color_str$/;"	l
global	lib/kliba.asm	/^global disp_str$/;"	l
global	lib/kliba.asm	/^global in_byte$/;"	l
global	lib/kliba.asm	/^global out_byte$/;"	l
global	lib/string.asm	/^global memcpy$/;"	l
idt	include/global.h	/^EXTERN	GATE		idt[IDT_SIZE];$/;"	v
idt_ptr	include/global.h	/^EXTERN	u8		idt_ptr[6];$/;"	v
in_byte	include/proto.h	/^PUBLIC void in_byte(u16 port);$/;"	p	signature:(u16 port)
in_byte	lib/kliba.asm	/^in_byte:$/;"	l
inc	boot/boot.asm	/^		inc	di$/;"	d
inc	boot/loader.asm	/^	inc	di$/;"	d
inc	lib/string.asm	/^	inc	di$/;"	d
init_8259A	include/proto.h	/^PUBLIC void init_8259A();$/;"	p	signature:()
init_8259A	kernel/i8259.c	/^PUBLIC void init_8259A()$/;"	f
init_idt_desc	kernel/protect.c	/^PRIVATE void init_idt_desc(unsigned char vector, u8 desc_type, $/;"	f	signature:(unsigned char vector, u8 desc_type, int_handler handler, unsigned char privilege)
init_kernel	boot/loader.asm	/^init_kernel:$/;"	l
init_prot	include/proto.h	/^PUBLIC void init_prot();$/;"	p	signature:()
init_prot	kernel/protect.c	/^PUBLIC void init_prot()$/;"	f
int_handler	include/type.h	/^typedef void (*int_handler) ();$/;"	t
inval_opcode	kernel/kernel.asm	/^inval_opcode:$/;"	l
inval_opcode	kernel/protect.c	/^void inval_opcode();$/;"	p	file:
inval_tss	kernel/kernel.asm	/^inval_tss:$/;"	l
inval_tss	kernel/protect.c	/^void inval_tss();$/;"	p	file:
is_odd	boot/boot.asm	/^is_odd			db	0$/;"	d
is_odd	boot/loader.asm	/^is_odd		db	0$/;"	d
itoa	lib/klib.c	/^PUBLIC char *itoa(char *str, int num)$/;"	f	signature:(char *str, int num)
kill_motor	boot/loader.asm	/^kill_motor:$/;"	l
len_high	boot/loader.asm	/^		len_high	equ	BaseOfLoaderPhyAddr + _len_high$/;"	d
len_low	boot/loader.asm	/^		len_low		equ	BaseOfLoaderPhyAddr + _len_low$/;"	d
len_str	boot/boot.asm	/^len_str			equ	9$/;"	d
len_str	boot/loader.asm	/^len_str		equ	9$/;"	d
limit_high_attr2	include/protect.h	/^	u8 limit_high_attr2;$/;"	m	struct:s_descriptor	access:public
limit_low	include/protect.h	/^	u16 limit_low;$/;"	m	struct:s_descriptor	access:public
memchk_buf	boot/loader.asm	/^	memchk_buf		equ	BaseOfLoaderPhyAddr + _memchk_buf$/;"	d
memcpy	boot/loader.asm	/^memcpy:$/;"	l
memcpy	include/string.h	/^PUBLIC void *memcpy(void *p_dst, void *src, int size);$/;"	p	signature:(void *p_dst, void *src, int size)
memcpy	lib/string.asm	/^memcpy:$/;"	l
memsize	boot/loader.asm	/^	memsize			equ	BaseOfLoaderPhyAddr + _memsize$/;"	d
mul	boot/boot.asm	/^	mul	dh$/;"	d
mul	boot/loader.asm	/^	mul	dh$/;"	d
nmi	kernel/kernel.asm	/^nmi:$/;"	l
nmi	kernel/protect.c	/^void nmi();$/;"	p	file:
nr_mcr	boot/loader.asm	/^	nr_mcr			equ	BaseOfLoaderPhyAddr + _nr_mcr$/;"	d
nr_sec_unread	boot/boot.asm	/^nr_sec_unread		dw	14$/;"	d
nr_sec_unread	boot/loader.asm	/^nr_sec_unread	dw	14$/;"	d
offset_high	include/protect.h	/^	u16 offset_high;$/;"	m	struct:s_gate	access:public
offset_low	include/protect.h	/^	u16 offset_low;$/;"	m	struct:s_gate	access:public
org	boot/boot.asm	/^org		0x7c00$/;"	l
org	boot/loader.asm	/^org	0100h$/;"	l
out_byte	include/proto.h	/^PUBLIC void out_byte(u16 port, u8 value);$/;"	p	signature:(u16 port, u8 value)
out_byte	lib/kliba.asm	/^out_byte:$/;"	l
overflow	kernel/kernel.asm	/^overflow:$/;"	l
overflow	kernel/protect.c	/^void overflow();$/;"	p	file:
page_fault	kernel/kernel.asm	/^page_fault:$/;"	l
page_fault	kernel/protect.c	/^void page_fault();$/;"	p	file:
pop	boot/boot.asm	/^	pop	dx$/;"	d
pop	boot/loader.asm	/^	pop	dx$/;"	d
print_int	boot/boot.asm	/^print_int:$/;"	l
push	boot/boot.asm	/^	push	dx$/;"	d
push	boot/loader.asm	/^	push	dx$/;"	d
puts	boot/boot.asm	/^puts:$/;"	l
puts	boot/loader.asm	/^puts:$/;"	l
readsec	boot/boot.asm	/^readsec:$/;"	l
readsec	boot/loader.asm	/^readsec:$/;"	l
readtimes	boot/boot.asm	/^readtimes		dw	0$/;"	d
s_descriptor	include/protect.h	/^typedef struct s_descriptor$/;"	s
s_descriptor::attr1	include/protect.h	/^	u8 attr1;$/;"	m	struct:s_descriptor	access:public
s_descriptor::base_high	include/protect.h	/^	u8 base_high;$/;"	m	struct:s_descriptor	access:public
s_descriptor::base_low	include/protect.h	/^	u16 base_low;$/;"	m	struct:s_descriptor	access:public
s_descriptor::base_mid	include/protect.h	/^	u8 base_mid;$/;"	m	struct:s_descriptor	access:public
s_descriptor::limit_high_attr2	include/protect.h	/^	u8 limit_high_attr2;$/;"	m	struct:s_descriptor	access:public
s_descriptor::limit_low	include/protect.h	/^	u16 limit_low;$/;"	m	struct:s_descriptor	access:public
s_gate	include/protect.h	/^typedef struct s_gate$/;"	s
s_gate::attr	include/protect.h	/^	u8 attr;$/;"	m	struct:s_gate	access:public
s_gate::dcount	include/protect.h	/^	u8 dcount;$/;"	m	struct:s_gate	access:public
s_gate::offset_high	include/protect.h	/^	u16 offset_high;$/;"	m	struct:s_gate	access:public
s_gate::offset_low	include/protect.h	/^	u16 offset_low;$/;"	m	struct:s_gate	access:public
s_gate::selector	include/protect.h	/^	u16 selector;$/;"	m	struct:s_gate	access:public
segment_not_present	kernel/kernel.asm	/^segment_not_present:$/;"	l
segment_not_present	kernel/protect.c	/^void segment_not_present();$/;"	p	file:
selector	include/protect.h	/^	u16 selector;$/;"	m	struct:s_gate	access:public
selector_flat_c	boot/loader.asm	/^selector_flat_c		equ	LABEL_DESC_FLAT_C - LABEL_GDT$/;"	d
selector_flat_rw	boot/loader.asm	/^selector_flat_rw	equ	LABEL_DESC_FLAT_RW - LABEL_GDT$/;"	d
selector_video	boot/loader.asm	/^selector_video		equ	LABEL_DESC_VIDEO - LABEL_GDT + SA_RPL3$/;"	d
setup_paging	boot/loader.asm	/^setup_paging:$/;"	l
single_step_exception	kernel/kernel.asm	/^single_step_exception:$/;"	l
single_step_exception	kernel/protect.c	/^void single_step_exception();$/;"	p	file:
stack_exception	kernel/kernel.asm	/^stack_exception:$/;"	l
stack_exception	kernel/protect.c	/^void stack_exception();$/;"	p	file:
stack_space	kernel/kernel.asm	/^stack_space	resb	2 * 1024$/;"	l
stack_top	kernel/kernel.asm	/^stack_top:$/;"	l
str_boot	boot/boot.asm	/^str_boot		db	"Booting  "$/;"	d
str_loading	boot/loader.asm	/^str_loading:	db	"LOADING  "$/;"	d
str_memtitle	boot/loader.asm	/^	str_memtitle		equ	BaseOfLoaderPhyAddr + _str_memtitle$/;"	d
str_nokernel	boot/loader.asm	/^str_nokernel	db	"No Kernel"$/;"	d
str_noloader	boot/boot.asm	/^str_noloader		db	"No loader"$/;"	d
str_ramsize	boot/loader.asm	/^	str_ramsize		equ	BaseOfLoaderPhyAddr + _str_ramsize$/;"	d
str_ready	boot/boot.asm	/^str_ready		db	"ready.   "$/;"	d
str_ready	boot/loader.asm	/^str_ready	db	"Ready.   "$/;"	d
str_return	boot/loader.asm	/^	str_return		equ	BaseOfLoaderPhyAddr + _str_return$/;"	d
struct_ard	boot/loader.asm	/^	struct_ard		equ	BaseOfLoaderPhyAddr + _struct_ard$/;"	d
times	boot/boot.asm	/^times	510 - ($ - $$)	db	0$/;"	l
topofstack	boot/loader.asm	/^topofstack		equ	BaseOfLoaderPhyAddr + \$$/;"	d
type	boot/loader.asm	/^		type		equ	BaseOfLoaderPhyAddr + _type$/;"	d
u16	include/type.h	/^typedef unsigned short u16;$/;"	t
u32	include/type.h	/^typedef unsigned int u32;$/;"	t
u8	include/type.h	/^typedef unsigned char u8;$/;"	t
